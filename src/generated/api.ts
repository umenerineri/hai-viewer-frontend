/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * III-Exhibition works-HAI viewer
 * API specification for interactions between Frontend, Backend, and Cloud Storage.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetView200,
  GetView400,
  GetView404,
  GetViewDefault
} from './model'



/**
 * Viewer Page for human AI drawings.
 * @summary Drawing Viewer Page
 */
export const getView = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetView200>> => {
    
    return axios.get(
      `/view`,options
    );
  }


export const getGetViewQueryKey = () => {
    return [`/view`] as const;
    }

    
export const getGetViewQueryOptions = <TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetViewQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getView>>> = ({ signal }) => getView({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData> & { queryKey: QueryKey }
}

export type GetViewQueryResult = NonNullable<Awaited<ReturnType<typeof getView>>>
export type GetViewQueryError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>


export function useGetView<TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getView>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetView<TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getView>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetView<TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Drawing Viewer Page
 */

export function useGetView<TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetViewQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetViewSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetViewQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getView>>> = ({ signal }) => getView({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData> & { queryKey: QueryKey }
}

export type GetViewSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getView>>>
export type GetViewSuspenseQueryError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>


export function useGetViewSuspense<TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetViewSuspense<TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetViewSuspense<TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Drawing Viewer Page
 */

export function useGetViewSuspense<TData = Awaited<ReturnType<typeof getView>>, TError = AxiosError<GetView400 | GetView404 | void | GetViewDefault>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getView>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetViewSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




